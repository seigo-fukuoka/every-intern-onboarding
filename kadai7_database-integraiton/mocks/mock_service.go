// Code generated by MockGen. DO NOT EDIT.
// Source: service/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	repository "kadai7_database-integration/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventServiceInterface is a mock of EventServiceInterface interface.
type MockEventServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceInterfaceMockRecorder
}

// MockEventServiceInterfaceMockRecorder is the mock recorder for MockEventServiceInterface.
type MockEventServiceInterfaceMockRecorder struct {
	mock *MockEventServiceInterface
}

// NewMockEventServiceInterface creates a new mock instance.
func NewMockEventServiceInterface(ctrl *gomock.Controller) *MockEventServiceInterface {
	mock := &MockEventServiceInterface{ctrl: ctrl}
	mock.recorder = &MockEventServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventServiceInterface) EXPECT() *MockEventServiceInterfaceMockRecorder {
	return m.recorder
}

// GetAllEvents mocks base method.
func (m *MockEventServiceInterface) GetAllEvents() ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents")
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEvents indicates an expected call of GetAllEvents.
func (mr *MockEventServiceInterfaceMockRecorder) GetAllEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockEventServiceInterface)(nil).GetAllEvents))
}

// ScrapeAndSaveEvents mocks base method.
func (m *MockEventServiceInterface) ScrapeAndSaveEvents(limit int) ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrapeAndSaveEvents", limit)
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrapeAndSaveEvents indicates an expected call of ScrapeAndSaveEvents.
func (mr *MockEventServiceInterfaceMockRecorder) ScrapeAndSaveEvents(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapeAndSaveEvents", reflect.TypeOf((*MockEventServiceInterface)(nil).ScrapeAndSaveEvents), limit)
}
