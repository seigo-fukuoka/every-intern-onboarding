// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	repository "kadai7_database-integration/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventRepositoryInterface is a mock of EventRepositoryInterface interface.
type MockEventRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryInterfaceMockRecorder
}

// MockEventRepositoryInterfaceMockRecorder is the mock recorder for MockEventRepositoryInterface.
type MockEventRepositoryInterfaceMockRecorder struct {
	mock *MockEventRepositoryInterface
}

// NewMockEventRepositoryInterface creates a new mock instance.
func NewMockEventRepositoryInterface(ctrl *gomock.Controller) *MockEventRepositoryInterface {
	mock := &MockEventRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepositoryInterface) EXPECT() *MockEventRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEventRepositoryInterface) Create(event repository.Event) (repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", event)
	ret0, _ := ret[0].(repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEventRepositoryInterfaceMockRecorder) Create(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventRepositoryInterface)(nil).Create), event)
}

// ExistsByDateAndTitle mocks base method.
func (m *MockEventRepositoryInterface) ExistsByDateAndTitle(date, title string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByDateAndTitle", date, title)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByDateAndTitle indicates an expected call of ExistsByDateAndTitle.
func (mr *MockEventRepositoryInterfaceMockRecorder) ExistsByDateAndTitle(date, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByDateAndTitle", reflect.TypeOf((*MockEventRepositoryInterface)(nil).ExistsByDateAndTitle), date, title)
}

// GetAll mocks base method.
func (m *MockEventRepositoryInterface) GetAll() ([]repository.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]repository.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEventRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEventRepositoryInterface)(nil).GetAll))
}
